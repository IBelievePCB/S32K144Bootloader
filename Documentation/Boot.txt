=============================================================================
List of generated methods in project: Boot

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This method configures registers according to settings of routing and electrical features. It 
                provides pin initialization for selected pins during processor start-up. Selected pins are either user selected 
                pins or pins selected in pin properties in components.  Only pins of devices  enabled for auto initialization 
                are handled within this method.

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_SYS_SetScgConfiguration -Configures SCG module.
   - clockMan1_CLOCK_SYS_SetPccConfiguration -Configures PCC module.
   - clockMan1_CLOCK_SYS_SetSimConfiguration -Configures SIM module.
   - clockMan1_CLOCK_SYS_SetPmcConfiguration -Configures PMC module.
   - clockMan1_CLOCK_SYS_Init -Install pre-defined clock configurations.
   - clockMan1_CLOCK_SYS_UpdateConfiguration -Set system clock configuration according to pre-defined structure.
   - clockMan1_CLOCK_SYS_SetConfiguration -Set system clock configuration.
   - clockMan1_CLOCK_SYS_GetCurrentConfiguration -Get current system clock configuration.
   - clockMan1_CLOCK_SYS_GetErrorCallback -Get the callback which returns error in last clock switch.
   - clockMan1_CLOCK_SYS_GetFreq -Gets the clock frequency for a specific clock name.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_ClearPending -Clear Pending Interrupt.
   - intMan1_INT_SYS_SetPending -Set Pending Interrupt.
   - intMan1_INT_SYS_GetPending -Get Pending Interrupt.
   - intMan1_INT_SYS_GetActive -Get Active Interrupt.

Module "canCom0"   (component flexcan)
   - canCom0_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - canCom0_FLEXCAN_DRV_SetBitrateCbt -Sets the FlexCAN bit rate for FD BRS.
   - canCom0_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - canCom0_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - canCom0_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - canCom0_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - canCom0_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - canCom0_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - canCom0_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - canCom0_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - canCom0_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - canCom0_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - canCom0_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - canCom0_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - canCom0_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - canCom0_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - canCom0_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - canCom0_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - canCom0_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - canCom0_FLEXCAN_DRV_IRQHandler -Interrupt handler for a FlexCAN instance.
   - canCom0_FLEXCAN_DRV_WakeUpHandler -Wake up handler for a FlexCAN instance.
   - canCom0_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - canCom0_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - canCom0_FLEXCAN_DRV_ConfigPN -Configures Pretended Networking settings.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA channel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA channel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA channel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA channel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA channel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA channel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the channel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the channel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.

Module "lpuart0"   (component lpuart)
   - lpuart0_LPUART_DRV_Init -Initializes an LPUART operation instance.
   - lpuart0_LPUART_DRV_Deinit -Shuts down the LPUART by disabling interrupts and transmitter/receiver.
   - lpuart0_LPUART_DRV_InstallRxCallback -Installs callback function for the LPUART receive.
   - lpuart0_LPUART_DRV_InstallTxCallback -Installs callback function for the LPUART transmit.
   - lpuart0_LPUART_DRV_SendDataBlocking -Sends data out through the LPUART module using a blocking method.
   - lpuart0_LPUART_DRV_SendData -Sends data out through the LPUART module using a non-blocking method. This enables an a-sync 
                method for transmitting data. When used with a non-blocking receive, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the transmit 
                status to know when the transmit is complete.
   - lpuart0_LPUART_DRV_GetTransmitStatus -Returns whether the previous transmit is complete.
   - lpuart0_LPUART_DRV_AbortSendingData -Terminates a non-blocking transmission early.
   - lpuart0_LPUART_DRV_ReceiveDataBlocking -Gets data from the LPUART module by using a blocking method. Blocking means that 
                the function does not return until the receive is complete.
   - lpuart0_LPUART_DRV_ReceiveData -Gets data from the LPUART module by using a non-blocking method. This enables an a-sync 
                method for receiving data. When used with a non-blocking transmission, the LPUART can perform a full duplex 
                operation. Non-blocking means that the function returns immediately. The application has to get the receive 
                status to know when the receive is complete.
   - lpuart0_LPUART_DRV_GetReceiveStatus -Returns whether the previous receive is complete.
   - lpuart0_LPUART_DRV_AbortReceivingData -Terminates a non-blocking receive early.

Module "flash0"    (component flash)
   - flash0_FLASH_DRV_Init -Flash initialization.
   - flash0_FLASH_DRV_GetPFlashProtection -P-Flash get protection.
   - flash0_FLASH_DRV_SetPFlashProtection -P-Flash set protection.
   - flash0_FLASH_DRV_GetSecurityState -Flash get security state.
   - flash0_FLASH_DRV_SecurityBypass -Flash security bypass.
   - flash0_FLASH_DRV_EraseAllBlock -Flash erase all Blocks.
   - flash0_FLASH_DRV_VerifyAllBlock -Flash verify all Blocks.
   - flash0_FLASH_DRV_EraseSector -Flash erase sector.
   - flash0_FLASH_DRV_VerifySection -Flash verify sector.
   - flash0_FLASH_DRV_EraseSuspend -Flash erase suspend.
   - flash0_FLASH_DRV_EraseResume -Flash erase resume.
   - flash0_FLASH_DRV_ReadOnce -Flash read once.
   - flash0_FLASH_DRV_ProgramOnce -Flash program once.
   - flash0_FLASH_DRV_Program -Flash program.
   - flash0_FLASH_DRV_ProgramCheck -Flash program check.
   - flash0_FLASH_DRV_CheckSum -Calculate check sum.
   - flash0_FLASH_DRV_ProgramSection -Flash program section.
   - flash0_FLASH_DRV_EraseBlock -Flash erase block.
   - flash0_FLASH_DRV_VerifyBlock -Flash verify block.
   - flash0_FLASH_DRV_GetEERAMProtection -EERAM get protection.
   - flash0_FLASH_DRV_SetEERAMProtection -EERAM set protection.
   - flash0_FLASH_DRV_SetFlexRamFunction -Flash Set FlexRam function command.
   - flash0_FLASH_DRV_EEEWrite -EEPROM Emulator Write.
   - flash0_FLASH_DRV_DEFlashPartition -Flash D/E-Flash Partition.
   - flash0_FLASH_DRV_GetDFlashProtection -D-Flash get protection.
   - flash0_FLASH_DRV_SetDFlashProtection -D-Flash set protection.
   - flash0_FLASH_DRV_PFlashSwap -swap between the two half of total logical P-Flash memory blocks within the memory map
   - flash0_FLASH_DRV_PFlashSwapCtl -implements swap control command corresponding with swap control code provided via swapcmd 
                parameter
   - flash0_FLASH_DRV_EraseAllBlockUnsecure -Flash erase all Blocks.

Module "crc"       (component crc)
   - crc_CRC_DRV_Init -This function initializes CRC driver based on user configuration input. The user must make sure that the 
                clock is enabled.
   - crc_CRC_DRV_Deinit -This function sets the default configuration.
   - crc_CRC_DRV_WriteData -This function appends a block of bytes to the current CRC calculation.
   - crc_CRC_DRV_GetCrcResult -This function returns the current result of the CRC calculation.
   - crc_CRC_DRV_Configure -This function configures the CRC module from a user configuration structure.

Module "Cpu"       (component S32K144_100)
   - Cpu_SystemInit -This function disables the watchdog, enables FPU and the power mode protection. SystemInit is called from 
                startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock. It must be called whenever the core clock is changed during program execution
   - Cpu_SystemSoftwareReset -This method initiates initiate a system reset.

===================================================================================
